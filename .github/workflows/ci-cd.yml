name: GCP DevOps CI/CD with Machine Learning Anomaly Detection

on:
  push:
    branches:
      - main

jobs:
  build-train-ml-model:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install -r ml/requirements.txt

      - name: Generate Sample Logs if Missing
        run: |
          echo "timestamp,loglevel,message" > logs/log_sample.csv
          echo "2025-03-07T12:00:00Z,INFO,Application started" >> logs/log_sample.csv
          echo "2025-03-07T12:01:00Z,INFO,User logged in" >> logs/log_sample.csv
          echo "2025-03-07T12:02:00Z,ERROR,Database connection failed" >> logs/log_sample.csv

      - name: Train ML Model
        run: |
          python ml/train_log_anomaly_model.py

      - name: Move Trained Model (Only If Needed)
        run: |
          if [ -f "ml/model/log_anomaly_model.h5" ]; then
            echo "âœ… Model already in correct location. Skipping move."
          else
            echo "ðŸš¨ ERROR: Model file not found!"
            exit 1
          fi

      - name: Upload Model as an Artifact
        uses: actions/upload-artifact@v4
        with:
          name: anomaly-detection-model
          path: ml/model/log_anomaly_model.h5

  build-and-deploy:
    needs: build-train-ml-model
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download ML Model Artifact
        uses: actions/download-artifact@v3
        with:
          name: anomaly-detection-model
          path: ml/model/

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Configure Docker to use GCR
        run: gcloud auth configure-docker

      - name: Build and Push ML Anomaly Detection Service
        run: |
          docker build -t gcr.io/your-gcp-project-id/log-anomaly-service ./ml
          docker push gcr.io/your-gcp-project-id/log-anomaly-service

      - name: Deploy ML Anomaly Detection Service
        run: |
          gcloud container clusters get-credentials devops-cluster --region us-central1
          kubectl apply -f k8s/log-anomaly-deployment.yaml
          kubectl apply -f k8s/log-anomaly-service.yaml

      - name: Build and Push DevOps App
        run: |
          docker build -t gcr.io/your-gcp-project-id/devops-app:latest .
          docker push gcr.io/your-gcp-project-id/devops-app:latest

      - name: Deploy DevOps App
        run: |
          gcloud container clusters get-credentials devops-cluster --region us-central1
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml
          kubectl apply -f monitoring/logstash-config.yaml
          kubectl apply -f monitoring/kibana-alerts.json
          kubectl apply -f monitoring/prometheus-values.yaml
          kubectl apply -f monitoring/grafana-dashboards.yaml
          kubectl apply -f monitoring/otel-config.yaml

      - name: Check Deployment Health
        run: |
          sleep 10
          kubectl rollout status deployment/devops-app || (kubectl rollout undo deployment/devops-app && exit 1)

      - name: Push Logs to OpenTelemetry
        run: |
          kubectl apply -f monitoring/otel-config.yaml
          kubectl apply -f monitoring/prometheus-values.yaml

